/*
 * Author: Felix Hamborg <felix.hamborg@uni-konstanz.de>
 */
package kn.uni.hamborg.adv.table;

import com.google.common.base.MoreObjects;
import com.google.common.collect.ImmutableList;
import java.util.List;
import java.util.logging.Logger;
import kn.uni.hamborg.adv.AttributeHolder;
import kn.uni.hamborg.adv.topic.TopicScore;
import org.apache.lucene.document.Document;
import org.apache.lucene.search.Query;

/**
 * This represents a set of data that has been generated and collected and/or
 * afterwards gathered by certain processing steps based on filtering two
 * {@link FilterDimension}'s {@link FilterValue}s. The base of this
 * {@code FilterCell} is a set of {@link Document}s that have been generated by
 * applying such steps from above.
 *
 * @author Felix Hamborg <felix.hamborg@uni-konstanz.de>
 */
public class FilterCell extends AttributeHolder {

    private static final Logger LOG = Logger.getLogger(FilterCell.class.getSimpleName());

    // we do not use all documents here that satisfy the cell query, but only a fixed subset.
    // this is to ensure that each cell contributes equally to topic modelling
    // to really ensure this, if less than this number documents are retrieved in the cell, 
    // we need to clone documents until we reach the number
    // also, using only a subset increases topic modelling tremendously
    public static final int MAX_NUMBER_OF_CELL_DOCS = 100;

    private final transient ImmutableList<Document> documents;
    /**
     * row
     */
    private final FilterValue valueA;
    /**
     * column
     */
    private final FilterValue valueB;
    private final transient Query query;
    private final String id;
    private final String humanReadableId;
    private ImmutableList<TopicScore> topicsProbabilities;
    /**
     * The field {@code documents} represents the top MAX_NUMBER_OF_CELL_DOCS
     * document subset matching the cell-query. However, for further statistics
     * we also store the total number of documents matching the cell query.
     */
    private final int countTotalDocsMatchingCellQuery;

    /**
     * Constructs this from a list of {@link Document}s. Note that the list
     * itself is not used but a copy of it is used to store internally an
     * immutable list of its elements.
     *
     * @param documents
     * @param query The query that lead to the base documents.
     * @param valueA
     * @param valueB
     * @param countTotalDocsMatchingCellQuery
     */
    public FilterCell(List<Document> documents, Query query, FilterValue valueA, FilterValue valueB, int countTotalDocsMatchingCellQuery) {
        this.documents = ImmutableList.copyOf(documents);
        this.valueA = valueA;
        this.valueB = valueB;
        this.query = query;
        this.humanReadableId = valueA.getDescriptor() + "-" + valueB.getDescriptor();
        this.countTotalDocsMatchingCellQuery = countTotalDocsMatchingCellQuery;
        this.id = String.valueOf(valueA.getPositionInDimension())
                + "-"
                + String.valueOf(valueB.getPositionInDimension());
    }

    @Override
    public String toString() {
        return MoreObjects.toStringHelper(this)
                .add("valueA", valueA.toString())
                .add("valueB", valueB.toString())
                .add("#docs", documents.size())
                .toString();
    }

    @Override
    public int hashCode() {
        return this.query.hashCode();
    }

    @Override
    public boolean equals(Object obj) {
        if (obj instanceof FilterCell) {
            FilterCell other = (FilterCell) obj;
            return query.equals(obj);
        } else {
            return false;
        }
    }

    public String getRowValue() {
        return valueA.getDescriptor();
    }

    public String getColumnValue() {
        return valueB.getDescriptor();
    }

    /**
     * The query that built the documents of this cells.
     *
     * @return
     */
    public Query getQuery() {
        return query;
    }

    /**
     * The underlying list of documents of this cell.
     *
     * @return
     */
    public ImmutableList<Document> getDocuments() {
        return documents;
    }

    /**
     * Returns the id which is in following form:<br>
     * {@code [row position]-[column position]}
     *
     * @return
     */
    public String getId() {
        return id;
    }

    /**
     * Returns a human readable identifier descriptor of this cell which is in
     * form:<br> {@code [value of row]-[value of column]}
     *
     * @return
     */
    public String getHumanReadableId() {
        return humanReadableId;
    }

    /**
     * Adds (sorted) list of topics to this.
     *
     * @param topicProbabilities
     */
    public void setTopics(List<TopicScore> topicProbabilities) {
        this.topicsProbabilities = ImmutableList.copyOf(topicProbabilities);
    }

    /**
     * Returns relevant topics and their probabilities (ordered by probability).
     *
     * @return
     */
    public ImmutableList<TopicScore> getTopicProbabilities() {
        return topicsProbabilities;
    }

    public int getCountTotalDocsMatchingQuery() {
        return countTotalDocsMatchingCellQuery;
    }

}
